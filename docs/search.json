[{"path":"index.html","id":"section","chapter":"","heading":"","text":"TFI eWorkshop  | Using Python Tell Stories Data","code":""},{"path":"index.html","id":"about-this-eworkshop","chapter":"","heading":"About this eWorkshop","text":"","code":""},{"path":"index.html","id":"abstract","chapter":"","heading":"Abstract","text":"\nData -powerful; can make break scientific theories cast far-reaching influence , example, beliefs society. pertinent example use (misuse) data handling COVID-19 pandemic. highlighted need , least, teach simple analytical visualisation skills tools gain insights data.Python friendly, extremely popular powerful computational language free. Python versatile can used simple visualisation analytical tasks even interrogate big data sets. workshop gently guide using Python visualise data make simple statistical queries. equip students powerful computational tool can readily used gain insight scientific data. Learning Python also open endless computational possibilities (e.g. machine learning, image analysis).prior programming knowledge expected, just lots enthusiasm sense humour.","code":""},{"path":"index.html","id":"workflow","chapter":"","heading":"Workflow","text":"email participants details, closer date workshop.","code":""},{"path":"index.html","id":"objectives","chapter":"","heading":"Objectives","text":"help want start programming get started.\nexpect code super-efficient; just needs work. Perfection can come later.\ncan borrow code internet least know even know .\nexpect code super-efficient; just needs work. Perfection can come later.can borrow code internet least know even know .Learn least amount code concepts can achieve common tasks related data visualisation.\nparticular, focus code related :\nbasic Python\nhandling data\nplotting.\nbasic Pythonhandling dataplotting.","code":""},{"path":"index.html","id":"supporting-institutions","chapter":"","heading":"Supporting Institutions","text":"Temasek Foundation International (TFI)National University Singapore (NUS)\nSpecial Programme Science (SPS, sps.nus.edu.sg)\nScience Communication Programme, Faculty Science\nSpecial Programme Science (SPS, sps.nus.edu.sg)Science Communication Programme, Faculty Science","code":""},{"path":"basic-plotting-with-pandas.html","id":"basic-plotting-with-pandas","chapter":"1 Basic Plotting with Pandas","heading":"1 Basic Plotting with Pandas","text":"","code":""},{"path":"basic-plotting-with-pandas.html","id":"example-2-a-simple-plot","chapter":"1 Basic Plotting with Pandas","heading":"Example 2 |  A Simple Plot","text":"","code":""},{"path":"basic-plotting-with-pandas.html","id":"result","chapter":"1 Basic Plotting with Pandas","heading":"Result","text":"","code":""},{"path":"basic-plotting-with-pandas.html","id":"code","chapter":"1 Basic Plotting with Pandas","heading":"Code","text":"can scatter (without error bars) using scatter (commented ).fmt short ‘format string.’ decides shape data point.\\(…\\) allows us use (limited set ) LaTeX commands!","code":"from matplotlib import pyplot as plt\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\ny_2 = [0, 4, 8, 12, 16, 20]\nerr = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Lets start plotting\nplt.figure(figsize=(5, 5))\nplt.plot(x, y_1, color='red', linestyle='dashed', label='$Y_1$ values')\nplt.errorbar(x, y_2, yerr=err, color='black', fmt='o', label='$Y_2$ values')\n\nplt.xlabel('x-values')\nplt.ylabel('y-values')\nplt.title('X vs Y')\nplt.grid(alpha=.25)\nplt.legend(loc='upper left')\nplt.show()"},{"path":"basic-plotting-with-pandas.html","id":"example-3-test-a-simple-plot","chapter":"1 Basic Plotting with Pandas","heading":"Example 3 |  Test: A Simple Plot","text":"","code":""},{"path":"basic-plotting-with-pandas.html","id":"results","chapter":"1 Basic Plotting with Pandas","heading":"Results","text":"","code":""},{"path":"basic-plotting-with-pandas.html","id":"tasks","chapter":"1 Basic Plotting with Pandas","heading":"Tasks","text":"questions:MakeXXX:xxxx","code":""},{"path":"basic-plotting-with-pandas.html","id":"code-1","chapter":"1 Basic Plotting with Pandas","heading":"Code","text":"text:abc","code":"from matplotlib import pyplot as plt\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\ny_2 = [0, 4, 8, 12, 16, 20]\nerr = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Lets start plotting\nplt.figure(figsize=(5, 5))\nplt.plot(x, y_1, color='red', linestyle='dashed', label='$Y_1$ values')\nplt.errorbar(x, y_2, yerr=err, color='black', fmt='o', label='$Y_2$ values')\n\nplt.xlabel('x-values')\nplt.ylabel('y-values')\nplt.title('X vs Y')\nplt.grid(alpha=.25)\nplt.legend(loc='upper left')\nplt.show()\n\nfrom matplotlib import pyplot as plt\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\ny_2 = [0, 4, 8, 12, 16, 20]\nerr = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Lets start plotting\nplt.figure(figsize=(5, 5))\nplt.plot(x, y_1, color='red', linestyle='dashed', label='$Y_1$ values')\nplt.errorbar(x, y_2, yerr=err, color='black', fmt='o', label='$Y_2$ values')\n\nplt.xlabel('x-values')\nplt.ylabel('y-values')\nplt.title('X vs Y')\nplt.grid(alpha=.25)\nplt.legend(loc='upper left')\nplt.show()\n"},{"path":"basic-plotting-with-pandas.html","id":"solution","chapter":"1 Basic Plotting with Pandas","heading":"Solution","text":"text:abc","code":"from matplotlib import pyplot as plt\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\ny_2 = [0, 4, 8, 12, 16, 20]\nerr = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Lets start plotting\nplt.figure(figsize=(5, 5))\nplt.plot(x, y_1, color='red', linestyle='dashed', label='$Y_1$ values')\nplt.errorbar(x, y_2, yerr=err, color='black', fmt='o', label='$Y_2$ values')\n\nplt.xlabel('x-values')\nplt.ylabel('y-values')\nplt.title('X vs Y')\nplt.grid(alpha=.25)\nplt.legend(loc='upper left')\nplt.show()\n\nfrom matplotlib import pyplot as plt\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\ny_2 = [0, 4, 8, 12, 16, 20]\nerr = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Lets start plotting\nplt.figure(figsize=(5, 5))\nplt.plot(x, y_1, color='red', linestyle='dashed', label='$Y_1$ values')\nplt.errorbar(x, y_2, yerr=err, color='black', fmt='o', label='$Y_2$ values')\n\nplt.xlabel('x-values')\nplt.ylabel('y-values')\nplt.title('X vs Y')\nplt.grid(alpha=.25)\nplt.legend(loc='upper left')\nplt.show()\n"}]
