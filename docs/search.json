[{"path":"index.html","id":"section","chapter":"","heading":"","text":"TFI eWorkshop  | Using Python Tell Stories Data","code":""},{"path":"index.html","id":"about-this-eworkshop","chapter":"","heading":"About this eWorkshop","text":"","code":""},{"path":"index.html","id":"abstract","chapter":"","heading":"Abstract","text":"\nData -powerful; can make break scientific theories cast far-reaching influence , example, beliefs society. pertinent example use (misuse) data handling COVID-19 pandemic. highlighted need , least, teach simple analytical visualisation skills tools gain insights data.Python friendly, extremely popular powerful computational language free. Python versatile can used simple visualisation analytical tasks even interrogate big data sets. workshop gently guide using Python visualise data make simple statistical queries. equip students powerful computational tool can readily used gain insight scientific data. Learning Python also open endless computational possibilities (e.g. machine learning, image analysis).prior programming knowledge expected, just lots enthusiasm sense humour.","code":""},{"path":"index.html","id":"workflow","chapter":"","heading":"Workflow","text":"email participants details, closer date workshop.","code":""},{"path":"index.html","id":"objectives","chapter":"","heading":"Objectives","text":"help want start programming get started.\nexpect code super-efficient; just needs work. Perfection can come later.\ncan borrow code internet least know even know .\nexpect code super-efficient; just needs work. Perfection can come later.can borrow code internet least know even know .Learn least amount code concepts can achieve common tasks related data visualisation.\nparticular, focus code related :\nbasic Python\nhandling data\nplotting.\nbasic Pythonhandling dataplotting.","code":""},{"path":"index.html","id":"supporting-institutions","chapter":"","heading":"Supporting Institutions","text":"Temasek Foundation International (TFI)National University Singapore (NUS)\nSpecial Programme Science (SPS, sps.nus.edu.sg)\nScience Communication Programme, Faculty Science\nSpecial Programme Science (SPS, sps.nus.edu.sg)Science Communication Programme, Faculty Science","code":""},{"path":"basic-plotting-with-pandas.html","id":"basic-plotting-with-pandas","chapter":"1 Basic Plotting with Pandas","heading":"1 Basic Plotting with Pandas","text":"","code":""},{"path":"basic-plotting-with-pandas.html","id":"example-2-a-simple-plot","chapter":"1 Basic Plotting with Pandas","heading":"Example 2 |  A Simple Plot","text":"","code":""},{"path":"basic-plotting-with-pandas.html","id":"result","chapter":"1 Basic Plotting with Pandas","heading":"Result","text":"","code":""},{"path":"basic-plotting-with-pandas.html","id":"code","chapter":"1 Basic Plotting with Pandas","heading":"Code","text":"can scatter (without error bars) using scatter (commented ).fmt short ‘format string.’ decides shape data point.\\(…\\) allows us use (limited set ) LaTeX commands!","code":"from matplotlib import pyplot as plt\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\ny_2 = [0, 4, 8, 12, 16, 20]\nerr = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Lets start plotting\nplt.figure(figsize=(5, 5))\nplt.plot(x, y_1, color='red', linestyle='dashed', label='$Y_1$ values')\nplt.errorbar(x, y_2, yerr=err, color='black', fmt='o', label='$Y_2$ values')\n\nplt.xlabel('x-values')\nplt.ylabel('y-values')\nplt.title('X vs Y')\nplt.grid(alpha=.25)\nplt.legend(loc='upper left')\nplt.show()"},{"path":"basic-plotting-with-pandas.html","id":"example-3-test-a-simple-plot","chapter":"1 Basic Plotting with Pandas","heading":"Example 3 |  Test: A Simple Plot","text":"","code":""},{"path":"basic-plotting-with-pandas.html","id":"results","chapter":"1 Basic Plotting with Pandas","heading":"Results","text":"","code":""},{"path":"basic-plotting-with-pandas.html","id":"code-1","chapter":"1 Basic Plotting with Pandas","heading":"Code","text":"can scatter (without error bars) using scatter (commented ).fmt short ‘format string.’ decides shape data point.\\(…\\) allows us use (limited set ) LaTeX commands!","code":"from matplotlib import pyplot as plt\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\ny_2 = [0, 4, 8, 12, 16, 20]\nerr = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Lets start plotting\nplt.figure(figsize=(5, 5))\nplt.plot(x, y_1, color='red', linestyle='dashed', label='$Y_1$ values')\nplt.errorbar(x, y_2, yerr=err, color='black', fmt='o', label='$Y_2$ values')\n\nplt.xlabel('x-values')\nplt.ylabel('y-values')\nplt.title('X vs Y')\nplt.grid(alpha=.25)\nplt.legend(loc='upper left')\nplt.show()\n\nfrom matplotlib import pyplot as plt\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\ny_2 = [0, 4, 8, 12, 16, 20]\nerr = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Lets start plotting\nplt.figure(figsize=(5, 5))\nplt.plot(x, y_1, color='red', linestyle='dashed', label='$Y_1$ values')\nplt.errorbar(x, y_2, yerr=err, color='black', fmt='o', label='$Y_2$ values')\n\nplt.xlabel('x-values')\nplt.ylabel('y-values')\nplt.title('X vs Y')\nplt.grid(alpha=.25)\nplt.legend(loc='upper left')\nplt.show()\n"},{"path":"using-pandas-to-explore-covid-19-data.html","id":"using-pandas-to-explore-covid-19-data","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"2 Using Pandas to Explore COVID-19 Data","text":"","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"plans-for-this-section","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"2.1 Plans for this section","text":"previous two sections, introduced basics plotting using matplotlib generating exploratory analysis & visualisations using pandas. section, going put skills practice explore COVID19 dataset GitHub (https://github.com/datasets/covid-19) maintained Johns Hopkins University.","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"housekeeping","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"2.2 Housekeeping","text":"always good get rough idea dataset, right start.","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"exercise-2-what-are-we-dealing-with","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Exercise 2 |  What are we dealing with?","text":"","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"tasks","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Tasks","text":"Load data https://raw.githubusercontent.com/datasets/covid-19/main/data/countries-aggregated.csvWhat shape data? .e. many rows columns ?missing numbers?column names?","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"solution","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Solution","text":"","code":"data_url = 'https://raw.githubusercontent.com/datasets/covid-19/main/data/countries-aggregated.csv'\ndf = pd.read_csv(data_url)\n\ndf.shape#> (114270, 5)df.columns#> Index(['Date', 'Country', 'Confirmed', 'Recovered', 'Deaths'], dtype='object')df.head()#>          Date      Country  Confirmed  Recovered  Deaths\n#> 0  2020-01-22  Afghanistan          0          0       0\n#> 1  2020-01-23  Afghanistan          0          0       0\n#> 2  2020-01-24  Afghanistan          0          0       0\n#> 3  2020-01-25  Afghanistan          0          0       0\n#> 4  2020-01-26  Afghanistan          0          0       0df.describe()#>           Confirmed     Recovered         Deaths\n#> count  1.142700e+05  1.142700e+05  114270.000000\n#> mean   3.832402e+05  2.055785e+05    8941.022079\n#> std    2.057547e+06  1.153802e+06   40707.331433\n#> min    0.000000e+00  0.000000e+00       0.000000\n#> 25%    4.410000e+02  2.600000e+01       6.000000\n#> 50%    9.767000e+03  3.811000e+03     155.000000\n#> 75%    1.213500e+05  6.130400e+04    2185.000000\n#> max    3.879675e+07  3.097475e+07  637531.000000df.info()#> <class 'pandas.core.frame.DataFrame'>\n#> RangeIndex: 114270 entries, 0 to 114269\n#> Data columns (total 5 columns):\n#>  #   Column     Non-Null Count   Dtype \n#> ---  ------     --------------   ----- \n#>  0   Date       114270 non-null  object\n#>  1   Country    114270 non-null  object\n#>  2   Confirmed  114270 non-null  int64 \n#>  3   Recovered  114270 non-null  int64 \n#>  4   Deaths     114270 non-null  int64 \n#> dtypes: int64(3), object(2)\n#> memory usage: 4.4+ MB"},{"path":"using-pandas-to-explore-covid-19-data.html","id":"exercise-3-drop-those-unnecessary-columns","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Exercise 3 |  Drop those unnecessary columns?","text":"","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"tasks-1","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Tasks","text":"Assuming interested Number Deaths Number Confirmed cases.columns dataset.Drop unnecessary columns.","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"solution-1","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Solution","text":"solution specifies columns drop.","code":"df_dropped = df.drop(columns = 'Recovered')\ndf_dropped.head()#>          Date      Country  Confirmed  Deaths\n#> 0  2020-01-22  Afghanistan          0       0\n#> 1  2020-01-23  Afghanistan          0       0\n#> 2  2020-01-24  Afghanistan          0       0\n#> 3  2020-01-25  Afghanistan          0       0\n#> 4  2020-01-26  Afghanistan          0       0"},{"path":"using-pandas-to-explore-covid-19-data.html","id":"another-solution","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Another Solution","text":"solution specifies columns keep.","code":"# We want date, Country, Confirmed and Deaths\ndf_keep = df[[\"Date\", \"Country\", \"Confirmed\", \"Deaths\"]]\ndf_keep.head()#>          Date      Country  Confirmed  Deaths\n#> 0  2020-01-22  Afghanistan          0       0\n#> 1  2020-01-23  Afghanistan          0       0\n#> 2  2020-01-24  Afghanistan          0       0\n#> 3  2020-01-25  Afghanistan          0       0\n#> 4  2020-01-26  Afghanistan          0       0"},{"path":"using-pandas-to-explore-covid-19-data.html","id":"exercise-4-subset-to-asean-countries-only","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Exercise 4 |  Subset to ASEAN countries only","text":"","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"tasks-2","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Tasks","text":"dataframe huge many countries!Find way subset dataframe contain ASEAN countries. list containing ASEAN countries provided .Find way subset dataframe contain ASEAN countries. list containing ASEAN countries provided .ASEAN_countries_list = ['Brunei', 'Cambodia', 'Indonesia', 'Laos', 'Malaysia', 'Burma', 'Philippines', 'Singapore', 'Vietnam']ASEAN_countries_list = ['Brunei', 'Cambodia', 'Indonesia', 'Laos', 'Malaysia', 'Burma', 'Philippines', 'Singapore', 'Vietnam']Convert dates Date datetime using pd.to_datetime.Convert dates Date datetime using pd.to_datetime.","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"solution-2","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Solution","text":"","code":"ASEAN_countries_list = ['Brunei', 'Cambodia', 'Indonesia', 'Laos', 'Malaysia', 'Burma', 'Philippines', 'Singapore', 'Vietnam']\n\nasean_df = df_dropped[df_dropped['Country'].isin(ASEAN_countries_list)]\n\nasean_df.loc[:,'Date'] = pd.to_datetime(asean_df['Date'])#> /home/chammika/miniconda3/lib/python3.9/site-packages/pandas/core/indexing.py:1773: SettingWithCopyWarning: \n#> A value is trying to be set on a copy of a slice from a DataFrame.\n#> Try using .loc[row_indexer,col_indexer] = value instead\n#> \n#> See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n#>   self._setitem_single_column(ilocs[0], value, pi)asean_df.head()#>             Date Country  Confirmed  Deaths\n#> 14064 2020-01-22  Brunei          0       0\n#> 14065 2020-01-23  Brunei          0       0\n#> 14066 2020-01-24  Brunei          0       0\n#> 14067 2020-01-25  Brunei          0       0\n#> 14068 2020-01-26  Brunei          0       0"},{"path":"using-pandas-to-explore-covid-19-data.html","id":"exercise-5-subset-to-asean-countries-only","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Exercise 5 |  Subset to ASEAN countries only","text":"","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"result-1","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Result","text":"","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"tasks-3","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Tasks","text":"dataframe huge many countries!Find way subset dataframe contain ASEAN countries. list ASEAN countries.\nASEAN_countries_list = [\n'Brunei', 'Burma', 'Cambodia',\n'Indonesia', 'Laos', 'Malaysia',\n'Philippines', 'Singapore', 'Vietnam']Find way subset dataframe contain ASEAN countries. list ASEAN countries.","code":"ASEAN_countries_list = [\n'Brunei', 'Burma', 'Cambodia',\n'Indonesia', 'Laos', 'Malaysia',\n'Philippines', 'Singapore', 'Vietnam']"},{"path":"using-pandas-to-explore-covid-19-data.html","id":"solution-3","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Solution","text":"","code":"ASEAN_countries = [\n    'Brunei', 'Burma', 'Cambodia',\n    'Indonesia', 'Laos', 'Malaysia',\n    'Philippines', 'Singapore', 'Vietnam'\n]\n\n# Where are the rows with the ASEAN countries?\nfiltered_ASEAN_rows = df_all['Country'].isin(ASEAN_countries)\n\n# Select the ASEAN rows\ndf_ASEAN = df_all[filtered_ASEAN_rows]\n\ndf_ASEAN.head()\n\nASEAN_countries = [\n    'Brunei', 'Burma', 'Cambodia',\n    'Indonesia', 'Laos', 'Malaysia',\n    'Philippines', 'Singapore', 'Vietnam'\n]\n\n# Where are the rows with the ASEAN countries?\nfiltered_ASEAN_rows = df_all['Country'].isin(ASEAN_countries)\n\n# Select the ASEAN rows\ndf_ASEAN = df_all[filtered_ASEAN_rows]\n\ndf_ASEAN.head()\n"},{"path":"using-pandas-to-explore-covid-19-data.html","id":"exploration-of-covid19-dataset-bar-chart","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"2.3 Exploration of COVID19 dataset: Bar Chart","text":"","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"exercise-6-plotting-the-total-deaths-in-each-country","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Exercise 6 |  Plotting the Total Deaths in each country","text":"","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"tasks-4","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Tasks","text":"Subset dataset contains latest date country.Subset dataset contains latest date country.Using either pandas matplotlib , plot total number deaths country.Using either pandas matplotlib , plot total number deaths country.better way represent plot?\nHint: Maybe make barchart descending!better way represent plot?\nHint: Maybe make barchart descending!","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"solution-4","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Solution","text":"","code":"plt.cla()\nplt.subplots(figsize = (10,7))#> (<Figure size 3000x2100 with 1 Axes>, <AxesSubplot:>)latest_date = max(asean_df['Date'])\nasean_df_latest = asean_df[asean_df['Date'] == latest_date]\nasean_df_latest.set_index('Country', inplace = True)\n\n\nax = asean_df_latest['Deaths'].plot(kind = 'barh')\n\nax.set_xlabel('Total Deaths', fontsize = 15)#> Text(0.5, 0, 'Total Deaths')ax.set_ylabel('Country', fontsize = 15)#> Text(0, 0.5, 'Country')ax.set_title('Number of Deaths due to COVID-19\\nby countries', fontsize = 20)#> Text(0.5, 1.0, 'Number of Deaths due to COVID-19\\nby countries')plt.tight_layout()\nplt.show()"},{"path":"using-pandas-to-explore-covid-19-data.html","id":"solution-better-way","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Solution Better Way","text":"can tell, really clean. better way present plot sort countries descending order deaths!","code":"plt.cla()\nplt.subplots(figsize = (10,7))#> (<Figure size 3000x2100 with 1 Axes>, <AxesSubplot:>)latest_date = max(asean_df['Date'])\nasean_df_latest = asean_df[asean_df['Date'] == latest_date]\nasean_df_latest.set_index('Country', inplace = True)\nasean_df_latest = asean_df_latest.sort_values(by = 'Deaths', ascending=True)\n\nax = asean_df_latest['Deaths'].plot(kind = 'barh')\n\nax.set_xlabel('Total Deaths', fontsize = 15)#> Text(0.5, 0, 'Total Deaths')ax.set_ylabel('Country', fontsize = 15)#> Text(0, 0.5, 'Country')ax.set_title('Number of Deaths due to COVID-19\\nsorted by descending order by countries', fontsize = 20)#> Text(0.5, 1.0, 'Number of Deaths due to COVID-19\\nsorted by descending order by countries')plt.tight_layout()\nplt.show()"},{"path":"using-pandas-to-explore-covid-19-data.html","id":"exploration-of-covid19-dataset-time-series","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"2.4 Exploration of COVID19 dataset: Time-Series","text":"","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"exercise-7-total-confirmed-cases-in-each-country-over-time","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Exercise 7 |  Total Confirmed Cases in each country over time","text":"","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"tasks-5","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Tasks","text":"Using dataframe containing DATES ASEAN countries :Plot total number confirmed cases dates.Plot total number confirmed cases dates.Ensure country colour.Ensure country colour.Enable legendEnable legend","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"solution-5","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Solution","text":"","code":"# asean_df is the df of choice\n\nplt.cla()\nfig, ax = plt.subplots(figsize = (10,5))\n\n#Iterate through our countries so we can plot automatically plot them!\nfor country in ASEAN_countries_list:\n    asean_df[asean_df['Country'] == country].plot('Date','Confirmed',ax=ax, label = country)#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>plt.legend()#> <matplotlib.legend.Legend object at 0x7f359958a8b0>plt.ylabel('Number of Confirmed Cases', fontsize = 15)#> Text(0, 0.5, 'Number of Confirmed Cases')plt.xlabel('Date', fontsize = 15)#> Text(0.5, 0, 'Date')plt.title('Number of Confirmed Cases over time in ASEAN countries', fontsize = 20)#> Text(0.5, 1.0, 'Number of Confirmed Cases over time in ASEAN countries')plt.tight_layout()\nplt.show()"},{"path":"using-pandas-to-explore-covid-19-data.html","id":"exploration-of-covid19-dataset-time-series-daily-cases","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"2.5 Exploration of COVID19 dataset: Time-Series Daily Cases","text":"","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"exercise-8-daily-confirmed-cases-in-each-country-over-time","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Exercise 8 |  Daily Confirmed Cases in each country over time","text":"","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"tasks-6","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Tasks","text":"Using dataframe containing DATES ASEAN countries :Find daily cases country using .diff().Find daily cases country using .diff().Set negative values NaN 0s.Set negative values NaN 0s.Plot daily number confirmed cases dates.Plot daily number confirmed cases dates.Ensure country colour.Ensure country colour.Enable legendEnable legend","code":""},{"path":"using-pandas-to-explore-covid-19-data.html","id":"solution-6","chapter":"2 Using Pandas to Explore COVID-19 Data","heading":"Solution","text":"","code":"import numpy as np\n\n# asean_df is the df of choice\n\n# Make a copy\nt_asean = asean_df.copy()\n\n# Using .diff() to find the difference between rows\nt_asean.loc[:, 'Daily'] = t_asean['Confirmed'].diff()\n\n# Setting Negative Values to 0 or NaN because of Math\nt_asean[t_asean['Daily'] < 0] = np.NaN\n\n\nplt.cla()\nfig, ax = plt.subplots(figsize = (10,5))\n\n\n#Iterate through our countries so we can plot automatically plot them!\nfor country in ASEAN_countries_list:\n    t_asean[t_asean['Country'] == country].plot('Date','Daily',ax=ax, label = country)#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>\n#> <AxesSubplot:xlabel='Date'>plt.legend()#> <matplotlib.legend.Legend object at 0x7f359966c7c0>plt.ylabel('Number of Daily Cases', fontsize = 15)#> Text(0, 0.5, 'Number of Daily Cases')plt.xlabel('Date', fontsize = 15)#> Text(0.5, 0, 'Date')plt.title('Number of Daily Cases over time in ASEAN countries', fontsize = 20)#> Text(0.5, 1.0, 'Number of Daily Cases over time in ASEAN countries')plt.tight_layout()\nplt.show()"}]
