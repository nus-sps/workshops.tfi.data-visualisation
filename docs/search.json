[{"path":"index.html","id":"welcome-to","chapter":"1 Welcome to…","heading":"1 Welcome to…","text":"TFI eWorkshop  | Using Python Tell Stories Data","code":""},{"path":"index.html","id":"about-this-eworkshop","chapter":"1 Welcome to…","heading":"About this eWorkshop","text":"","code":""},{"path":"index.html","id":"abstract","chapter":"1 Welcome to…","heading":"Abstract","text":"\nData -powerful; can make break scientific theories cast far-reaching influence , example, beliefs society. pertinent example use (misuse) data handling COVID-19 pandemic. highlighted need , least, teach simple analytical visualisation skills tools gain insights data.Python friendly, extremely popular powerful computational language free. Python versatile can used simple visualisation analytical tasks even interrogate big data sets. workshop gently guide using Python visualise data make simple statistical queries. equip students powerful computational tool can readily used gain insight scientific data. Learning Python also open endless computational possibilities (e.g. machine learning, image analysis).prior programming knowledge expected, just lots enthusiasm sense humour.","code":""},{"path":"index.html","id":"workflow","chapter":"1 Welcome to…","heading":"Workflow","text":"email participants details, closer date workshop.","code":""},{"path":"index.html","id":"aims-objectives","chapter":"1 Welcome to…","heading":"Aims & Objectives","text":"","code":""},{"path":"index.html","id":"aims","chapter":"1 Welcome to…","heading":"Aims","text":"help want start programming get started.\nexpect code super-efficient; just needs work. Perfection can come later.\ncan borrow code internet least know even know .\nexpect code super-efficient; just needs work. Perfection can come later.can borrow code internet least know even know .Learn least amount code concepts can achieve common tasks related data visualisation.\nparticular, focus code related :\nbasic Python\nhandling data\nplotting.\nbasic Pythonhandling dataplotting.","code":""},{"path":"index.html","id":"objectives","chapter":"1 Welcome to…","heading":"Objectives","text":"end workshops, able :Use Python (matplotlib) produce high quality plotsUse Python (pandas) query simple datasetsUse Python (pandas + matplotlib) produce visualisations COVID-19 data.Indentify apply core principles effective visualisation data.","code":""},{"path":"index.html","id":"supporting-institutions","chapter":"1 Welcome to…","heading":"Supporting Institutions","text":"Temasek Foundation International (TFI)National University Singapore (NUS)\nSpecial Programme Science (SPS, sps.nus.edu.sg)\nScience Communication Programme, Faculty Science\nSpecial Programme Science (SPS, sps.nus.edu.sg)Science Communication Programme, Faculty Science","code":""},{"path":"hello.html","id":"hello","chapter":"2 Hello","heading":"2 Hello","text":"","code":""},{"path":"hello.html","id":"what-topics-will-we-discuss","chapter":"2 Hello","heading":"2.1 What topics will we discuss","text":"Python Universe enormous! want share minimum necessary useful things Python (still fun). material website exhaustive, want . complete resources elsewhere use reference. Please refer section resources details.Often many ways use Python achieve result. usually share way allows . just want get started; comfortable, can explore advanced methods using Python.","code":""},{"path":"hello.html","id":"some-tips","chapter":"2 Hello","heading":"2.2 Some Tips","text":"Remember little possible!Instead good websites (notes) can access easily.Don’t try remember syntaxInstead try understand syntax structured1.Experiment! Experiment! Experiment!Playing code cost anything. , curious. Go intuition try things . Things won’t work well te start willget better.Keyboard Shortcuts2Using keyboard makes life easy efficient. Learn many can.Don’t work aloneLearning fun faster discuss clarify things colleague3.Just learn needWhen starting programming better learn basics just need solve problem.","code":""},{"path":"hello.html","id":"python","chapter":"2 Hello","heading":"2.3 Python?","text":"","code":""},{"path":"hello.html","id":"section","chapter":"2 Hello","heading":"","text":"","code":""},{"path":"hello.html","id":"what-is-python","chapter":"2 Hello","heading":"What is Python?","text":"Python free friendly programming language. ‘brain’ Python called interpreter. newest version Python interpreter Python 3.","code":""},{"path":"hello.html","id":"how-do-i-use-python","chapter":"2 Hello","heading":"How do I use Python?","text":"Python interpreter can understand one instruction time. Therefore, usually write many instructions single file (code) ‘pass’ onto interpreter. files typically extension .py. However, Python can also used interactively using environment called Jupyter notebook.One best (easiest) ways get started Python use online environment like Colab. However, want can also install computer using Anaconda distribution installing locally machine without Anaconda!","code":""},{"path":"hello.html","id":"ways-to-access-python","chapter":"2 Hello","heading":"2.4 Ways to access Python?","text":"","code":""},{"path":"hello.html","id":"section-1","chapter":"2 Hello","heading":"","text":"","code":""},{"path":"hello.html","id":"jupyter-notebooks","chapter":"2 Hello","heading":"Jupyter Notebooks","text":"\nFigure 2.1: Examples Jupyter Notebooks (jupyter.org)\n many ways issue commands Python interpreter. Jupyter notebook one easy (popular) environment write Python4 code. Jupyter notebook also allows combine Markdown Python document produce rich content can easily converted reports even interactive presentation slides!Jupyter notebook files extension .ipynb5.","code":""},{"path":"hello.html","id":"raw-python","chapter":"2 Hello","heading":"Raw Python","text":"\nFigure 2.2: Example Code Editor Sublime Text.\n Alternatively, want something simple, can just install Python (see section ) use various code editors run python code. Python files extension .py!Pyhton editors commonly used include (limited ) Sublime Text, Spyder, Visual Studio Code, Atom.","code":""},{"path":"hello.html","id":"colab","chapter":"2 Hello","heading":"Colab","text":"\nFigure 2.3: Example Colab notebook.\nColab (free) platform offered Google coding Python (languages). Colab offers environment (almost) identical Jupyter notebook.advantages using Colab :Colab allow us use Python without install computers.Colab enable us share code others (just like Google document)Colab processing servers. , won’t tax computer6.","code":""},{"path":"hello.html","id":"installing-python","chapter":"2 Hello","heading":"2.4.1 Installing Python","text":"","code":""},{"path":"hello.html","id":"section-2","chapter":"2 Hello","heading":"","text":"","code":""},{"path":"hello.html","id":"with-anaconda","chapter":"2 Hello","heading":"With Anaconda","text":"install Python locally machine workshop. However, like Python computer recommend use Anaconda distribution called miniconda.Step 1. Visit download page Anaconda.Step 2. Download install 64-bit Python 3 distribution suitable operating system.(Windows users run Anaconda Administrator)","code":""},{"path":"hello.html","id":"without-anaconda","chapter":"2 Hello","heading":"Without Anaconda","text":"like install Python locally machine workshop use:Step 1. Visit download page python.org.Step 2. Download install 64-bit Python 3 version (3.7 fine) suitable operating system.Step 3. Ensure “Add Python PATH” option ticked installer!Step 4. Open favorite editor search “IDLE” computer start typing python commands!","code":""},{"path":"hello.html","id":"installing-packages-with-command-prompt","chapter":"2 Hello","heading":"Installing packages with command prompt","text":"Step 1. Open run.exe pressing windows key ‘R’ keyStep 2. Type cmd.exe click “Ok”Step 3. type python -m pip install PACKAGE_NAME press enter \n(replace PACKAGE_NAME relevant python packages like install.)","code":""},{"path":"hello.html","id":"conventions","chapter":"2 Hello","heading":"2.5 Conventions","text":"Python code shown grey box like :#> used show result (output) code. appear immediately code, like :","code":"print('Code is shown in a box like this')print('Code is shown in a box like this')#> Code is shown in a box like this"},{"path":"hello.html","id":"sec:resources","chapter":"2 Hello","heading":"2.6 Resources","text":"","code":""},{"path":"hello.html","id":"jupyter-notebooks-1","chapter":"2 Hello","heading":"2.6.1 Jupyter Notebooks","text":"Take look site cool tricks optimisations notebooks.","code":""},{"path":"instructions.html","id":"instructions","chapter":"3 Instructions","heading":"3 Instructions","text":"like learnt basics Python Colab workshop. way, can use workshop time focus advanced ideas pay attention solving difficulties might encounter. , please work activities given section Python Basics come workshop. take 30 minutes.questions encounter difficulties please reach us Piazza (see ).","code":""},{"path":"instructions.html","id":"start-communicatiing-with-us","chapter":"3 Instructions","heading":"Start Communicatiing with Us!","text":"Please use Piazza questions.necessary Piazza allows share Python code.","code":""},{"path":"some-python-basics.html","id":"some-python-basics","chapter":"4 Some Python Basics","heading":"4 Some Python Basics","text":"","code":""},{"path":"some-python-basics.html","id":"a-quick-summary","chapter":"4 Some Python Basics","heading":"A Quick Summary","text":"Use # write comments.Python case sensitive.x ‘x’.= ==.careful indentaions start line.Add functionalit using packages.\nE.g. import numpy np\nE.g. import numpy np. indicates ownership.\nE.g. np.sum() means sum() function belonging numpy.\nE.g. np.sum() means sum() function belonging numpy.can store data list numpy arrays.Access elements list using [2:3].Get help using ?.","code":""},{"path":"some-python-basics.html","id":"before-the-workshop","chapter":"4 Some Python Basics","heading":"4.1 Before the Workshop","text":"chapter quickly introduce basic Python.\nneed :Watch two videos (4 mins 12 mins) videos .\nalso shared Colab notebook relevant video.\nalso shared Colab notebook relevant video.Work short exercises shown Colab.\nsolution exercises can also found .\ntake 20 minutes.\nsolution exercises can also found .take 20 minutes.","code":""},{"path":"some-python-basics.html","id":"exercises-video-file","chapter":"4 Some Python Basics","heading":"4.2 Exercises & Video File","text":"","code":""},{"path":"some-python-basics.html","id":"videos","chapter":"4 Some Python Basics","heading":"Videos","text":"","code":""},{"path":"some-python-basics.html","id":"getting-started-with-colab-3.5-mins","chapter":"4 Some Python Basics","heading":"Getting started with Colab (3.5 mins)","text":"","code":""},{"path":"some-python-basics.html","id":"some-python-basics-12-mins","chapter":"4 Some Python Basics","heading":"Some Python Basics (12 mins)","text":"","code":""},{"path":"some-python-basics.html","id":"video-colab-file","chapter":"4 Some Python Basics","heading":"Video (Colab file)","text":"","code":""},{"path":"some-python-basics.html","id":"basic-exercises","chapter":"4 Some Python Basics","heading":"Basic Exercises","text":"Create new notebook Colab use answer following questions.Predict output following code blocks?\nRun Colab check predictions correct?\nNote: might look internet meaning symbols (/ %)\n   7 / 3 == 7 / 3.0\n'nesia' 'Indonesia'\n(2 + 3) == 5\n 2 + 3 == 5\n \"2\" + \"3\" == \"5\"\n 11 % 3\n 1 < 2 11 >= 9\n 2 > 5 (1 < 2 11 >= 9)\nPredict output following code blocks?\nRun Colab check predictions correct?Note: might look internet meaning symbols (/ %)   7 / 3 == 7 / 3.0'nesia' 'Indonesia'(2 + 3) == 5 2 + 3 == 5 \"2\" + \"3\" == \"5\" 11 % 3 1 < 2 11 >= 9 2 > 5 (1 < 2 11 >= 9)Hello Batman & Robin\nname = 'Batman'\n\nname == 'Batman':\n   print('Hello Batman!')\nelse:\n   print('Hello World!')\nModify code print ‘Hello Hello Hello Hello Batman’ name ‘Batman.’\nModify code respond Robin instead Batman.\nHello Batman & RobinModify code print ‘Hello Hello Hello Hello Batman’ name ‘Batman.’Modify code respond Robin instead Batman.following code bugs; fix !\nx,y = 3,4\n    z = sqrt(x**2 + y**2)\n    print(x,y,z)following code bugs; fix !Use following lists numpy arrays answer following questions\nmy_np_list = np.array([0182, 0269, 0341, 0410, 0523,\n                       0697, 0728, 0856, 0948, 101,\n                       1120, 1272, 1312, 1460, 1564,\n                       1642, 1717, 1816, 1923, 2087])               \nnumber 4th position array?\nlast number array?\nfirst 3 values?\nvalues 4th 10th position? (include numbers 4th 10th positions.)\nvalues list greater 500?\nUse ‘hidden’ numpy functions max(), min(), mean() std() find maximum, minimum, mean standard deviation values numpy array.\nMake numbers less 500 equal zero!\nvalues list greater 500 less 1000?\nUse following lists numpy arrays answer following questionsWhat number 4th position array?last number array?first 3 values?values 4th 10th position? (include numbers 4th 10th positions.)values list greater 500?Use ‘hidden’ numpy functions max(), min(), mean() std() find maximum, minimum, mean standard deviation values numpy array.Make numbers less 500 equal zero!values list greater 500 less 1000?","code":"   7 / 3 == 7 / 3.0'nesia' in 'Indonesia'(2 + 3) == 5 2 + 3 == 5 \"2\" + \"3\" == \"5\" 11 % 3 1 < 2 and 11 >= 9 2 > 5 or (1 < 2 and 11 >= 9)name = 'Batman'\n\nif name == 'Batman':\n   print('Hello Batman!')\nelse:\n   print('Hello World!')x,y = 3,4\n    z = sqrt(x**2 + y**2)\n    print(x,y,z)my_np_list = np.array([0182, 0269, 0341, 0410, 0523,\n                       0697, 0728, 0856, 0948, 101,\n                       1120, 1272, 1312, 1460, 1564,\n                       1642, 1717, 1816, 1923, 2087])               "},{"path":"some-python-basics.html","id":"basic-exercises-solution","chapter":"4 Some Python Basics","heading":"Basic Exercises (Solution)","text":"","code":""},{"path":"instructions-1.html","id":"instructions-1","chapter":"5 Instructions","heading":"5 Instructions","text":"","code":""},{"path":"instructions-1.html","id":"general-flow","chapter":"5 Instructions","heading":"5.1 General flow","text":"workshop material composed many Examples Exercises.workshop material composed many Examples Exercises.Examples:\nCopy paste (use button) code examples Colab.\nExamples:Copy paste (use button) code examples Colab.\nFigure 5.1: Use Copy Clipboard button.\nRun see things work.Run see things work.Try make sense code.Try make sense code.Exercises:\nincluded get started new features new ways using code.\nPlease work together classmates facilitators.\nExercises:included get started new features new ways using code.Please work together classmates facilitators.","code":""},{"path":"instructions-1.html","id":"if-you-have-any-difficulties","chapter":"5 Instructions","heading":"5.2 If you have any difficulties","text":"Please speak (Zoom) use chat (Zoom) raise questions contribute discussion.use breakout rooms Zoom like everyone benefit discussions take place.Remember can use Piazza communicate whole class! (even workshop).Please use Piazza post questions/difficulties team.\nPlease indicate section related question question heading.\nE.g. Basic plotting: Plot show?\n\ntrouble code, please copy paste question.\nnecessary can also add screenshot.\nPlease indicate section related question question heading.\nE.g. Basic plotting: Plot show?\nE.g. Basic plotting: Plot show?trouble code, please copy paste question.necessary can also add screenshot.Please share code amongst .","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"basic-plotting-with-matplotlib","chapter":"6 Basic Plotting with matplotlib","heading":"6 Basic Plotting with matplotlib","text":"\nFigure 6.1: various parts matplotlib figure. (matplotlib.org)\n","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"some-simple-plots","chapter":"6 Basic Plotting with matplotlib","heading":"6.1 Some Simple Plots","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"example-1-a-simple-plot","chapter":"6 Basic Plotting with matplotlib","heading":"Example 1 |  A Simple Plot","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"results","chapter":"6 Basic Plotting with matplotlib","heading":"Results","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"code","chapter":"6 Basic Plotting with matplotlib","heading":"Code","text":"can scatter (without error bars) using scatter (commented ).fmt short ‘format string.’ decides shape data point.$…$ allows us use (limited set ) LaTeX commands!","code":"from matplotlib import pyplot as plt\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\ny_2 = [0, 4, 8, 12, 16, 20]\nerr = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Lets start plotting\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(5, 5))\nax.plot(x, y_1, color='red', linestyle='dashed', label='$Y_1$ values')\nax.errorbar(x, y_2, yerr=err, xerr=.25, color='black', fmt='o', label='$Y_2$ values')\n# ax.scatter(x, y_2, color='blue', label='$Y_2$ values')\n\nax.set_xlabel('x-values')\nax.set_ylabel('y-values')\nax.set_title('X vs Y')\nax.grid(alpha=.25)\nax.legend(loc='upper left')\nplt.show()\n\nfrom matplotlib import pyplot as plt\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\ny_2 = [0, 4, 8, 12, 16, 20]\nerr = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Lets start plotting\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(5, 5))\nax.plot(x, y_1, color='red', linestyle='dashed', label='$Y_1$ values')\nax.errorbar(x, y_2, yerr=err, xerr=.25, color='black', fmt='o', label='$Y_2$ values')\n# ax.scatter(x, y_2, color='blue', label='$Y_2$ values')\n\nax.set_xlabel('x-values')\nax.set_ylabel('y-values')\nax.set_title('X vs Y')\nax.grid(alpha=.25)\nax.legend(loc='upper left')\nplt.show()\n"},{"path":"basic-plotting-with-matplotlib.html","id":"exercise-1-a-simple-plot","chapter":"6 Basic Plotting with matplotlib","heading":"Exercise 1 |  A Simple Plot","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"results-1","chapter":"6 Basic Plotting with matplotlib","heading":"Results","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"tasks","chapter":"6 Basic Plotting with matplotlib","heading":"Tasks","text":"Reproduce plot Example 1 Colab copying pasting code.Reproduce plot Example 1 Colab copying pasting code.Comment errorbar plot un-comment scatter plot.Comment errorbar plot un-comment scatter plot.Visit colorbrewer2.org select two qualitative colour colourblind friendly print friendly.Visit colorbrewer2.org select two qualitative colour colourblind friendly print friendly.Change following properties plot.\nChange colour line first colour.\nChange colour scatter second colour.\nChange title ‘X vs. Y 2Y’\nChange following properties plot.Change colour line first colour.Change colour scatter second colour.Change title ‘X vs. Y 2Y’Change colour grid gray.Change colour grid gray.Change format saved figure PDF.Change format saved figure PDF.Download saved plot computer.\nPlease spend 5 minutes exercise.Download saved plot computer.Please spend 5 minutes exercise.","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"a-solution","chapter":"6 Basic Plotting with matplotlib","heading":"A Solution","text":"","code":"from matplotlib import pyplot as plt\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\ny_2 = [0, 4, 8, 12, 16, 20]\nerr = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Lets start plotting\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(5, 5))\nax.plot(x, y_1, color='#7570b3', linestyle='dashed', label='$Y_1$ values')\nax.scatter(x, y_2, color='#d95f02', label='$Y_2$ values')\n\nax.set_xlabel('x-values')\nax.set_ylabel('y-values')\nax.set_title('X vs Y and 2Y')\nax.grid(alpha=.25, color='gray')\nax.legend(loc='upper left')\n\nplt.savefig('simple-01.png', dpi=150)\nplt.show()\n\nfrom matplotlib import pyplot as plt\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\ny_2 = [0, 4, 8, 12, 16, 20]\nerr = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Lets start plotting\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(5, 5))\nax.plot(x, y_1, color='#7570b3', linestyle='dashed', label='$Y_1$ values')\nax.scatter(x, y_2, color='#d95f02', label='$Y_2$ values')\n\nax.set_xlabel('x-values')\nax.set_ylabel('y-values')\nax.set_title('X vs Y and 2Y')\nax.grid(alpha=.25, color='gray')\nax.legend(loc='upper left')\n\nplt.savefig('simple-01.png', dpi=150)\nplt.show()\n"},{"path":"basic-plotting-with-matplotlib.html","id":"example-2-another-way-to-plot","chapter":"6 Basic Plotting with matplotlib","heading":"Example 2 |  Another Way to Plot","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"results-2","chapter":"6 Basic Plotting with matplotlib","heading":"Results","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"code-1","chapter":"6 Basic Plotting with matplotlib","heading":"Code","text":"matplotlib allows several syntaxes. One referred pyplot API. simple can limited.\n-version using referred object-oriented API.\nslightly complicated offers flexibility versatility pyplot API.Just comparison, code using pyplot API format","code":"from matplotlib import pyplot as plt\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\ny_2 = [0, 4, 8, 12, 16, 20]\nerr = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Lets start plotting\nplt.figure(figsize=(5, 5))\nplt.plot(x, y_1, color='red', linestyle='dashed', label='$Y_1$ values')\nplt.errorbar(x, y_2, yerr=err, color='black', fmt='o', label='$Y_2$ values')\n\nplt.xlabel('x-values')\nplt.ylabel('y-values')\nplt.title('X vs Y')\nplt.grid(alpha=.25)\nplt.legend(loc='upper left')\nplt.show()\n\nfrom matplotlib import pyplot as plt\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\ny_2 = [0, 4, 8, 12, 16, 20]\nerr = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\n\n# Lets start plotting\nplt.figure(figsize=(5, 5))\nplt.plot(x, y_1, color='red', linestyle='dashed', label='$Y_1$ values')\nplt.errorbar(x, y_2, yerr=err, color='black', fmt='o', label='$Y_2$ values')\n\nplt.xlabel('x-values')\nplt.ylabel('y-values')\nplt.title('X vs Y')\nplt.grid(alpha=.25)\nplt.legend(loc='upper left')\nplt.show()\n"},{"path":"basic-plotting-with-matplotlib.html","id":"example-3-plotting-and-filling","chapter":"6 Basic Plotting with matplotlib","heading":"Example 3 |  Plotting and Filling","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"results-3","chapter":"6 Basic Plotting with matplotlib","heading":"Results","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"code-2","chapter":"6 Basic Plotting with matplotlib","heading":"Code","text":"plot:generated sine cosine graphs.plotted \\(y = 0\\) line.Filled spaces \\(\\cos x > \\sin x\\) orange.Filled spaces \\(\\sin x > \\cos x\\) blue.","code":"import numpy as np\nfrom matplotlib import pyplot as plt\n\n# Generating data\nx = np.linspace(-np.pi, np.pi, num=100, endpoint=True)\ncos_x = np.cos(x)\nsin_x = np.sin(x)\n\n# Plotting\nfig, axes = plt.subplots()\naxes.plot(x, sin_x, label='sin x')\naxes.plot(x, cos_x, label='cos x')\naxes.hlines(0, xmin = -np.pi, xmax = np.pi, linestyle = 'dashed')\n\n# Filling\naxes.fill_between(x, cos_x, sin_x, where=cos_x > sin_x,\n                  color='orange', alpha=.125, label='cos x > sin x')\n\naxes.fill_between(x, cos_x, sin_x, where=cos_x < sin_x,\n                  color='b', alpha=.075, label='cos x < sin x')\n\n# Aesthetics\naxes.set_xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi]),\naxes.set_xticklabels([r'$-\\pi$', r'$-\\pi/2$', r'$0$', r'$+\\pi/2$', r'$+\\pi$'])\n\naxes.legend()\naxes.grid(axis='x', alpha=.5)\n\nplt.tight_layout()\nplt.show()\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# Generating data\nx = np.linspace(-np.pi, np.pi, num=100, endpoint=True)\ncos_x = np.cos(x)\nsin_x = np.sin(x)\n\n# Plotting\nfig, axes = plt.subplots()\naxes.plot(x, sin_x, label='sin x')\naxes.plot(x, cos_x, label='cos x')\naxes.hlines(0, xmin = -np.pi, xmax = np.pi, linestyle = 'dashed')\n\n# Filling\naxes.fill_between(x, cos_x, sin_x, where=cos_x > sin_x,\n                  color='orange', alpha=.125, label='cos x > sin x')\n\naxes.fill_between(x, cos_x, sin_x, where=cos_x < sin_x,\n                  color='b', alpha=.075, label='cos x < sin x')\n\n# Aesthetics\naxes.set_xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi]),\naxes.set_xticklabels([r'$-\\pi$', r'$-\\pi/2$', r'$0$', r'$+\\pi/2$', r'$+\\pi$'])\n\naxes.legend()\naxes.grid(axis='x', alpha=.5)\n\nplt.tight_layout()\nplt.show()\n"},{"path":"basic-plotting-with-matplotlib.html","id":"multiple-plots","chapter":"6 Basic Plotting with matplotlib","heading":"6.2 Multiple Plots","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"example-4-a-column-of-axes","chapter":"6 Basic Plotting with matplotlib","heading":"Example 4 |  A Column of Axes","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"result","chapter":"6 Basic Plotting with matplotlib","heading":"Result","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"code-3","chapter":"6 Basic Plotting with matplotlib","heading":"Code","text":"generate two sets data sin x cos xWe want plot two graphs side side want \nfigure!done using plt.subplots() argument.plt.subplots() also ncols = specify number columns!","code":"from matplotlib import pyplot as plt\nimport numpy as np\n\n# Generating data via numpy package\nx = np.linspace(-np.pi, np.pi, num=30, endpoint=True)\ncos_x = np.cos(x)\nsin_x = np.sin(x)\n\n\n# Specify how many columns or rows\nfig, ax = plt.subplots(nrows = 2, figsize=(6, 5), sharex = True)\n\nax[1].set_xlabel('x-axis!', fontsize = 12)\n\n# Aesthetics & Plotting for ax[0] #\nax[0].plot(x, sin_x, marker = 'o', linestyle = '-' ,label='sin x')\nax[0].hlines(0, xmin = -np.pi, xmax = np.pi, linestyle = 'dashed')\nax[0].set_ylabel('y-axis for sin x!',fontsize = 16)\nax[0].set_title('title for sin x!',fontsize = 20)\n\n\n# Aesthetics & Plotting for ax[1] #\nax[1].plot(x, cos_x, label='cos x', color='green')\nax[1].hlines(0, xmin = -np.pi, xmax = np.pi, linestyle = 'dashed')\nax[1].set_ylabel('y-axis for cos x!',fontsize = 16)\nax[1].set_title('title for cos x!',fontsize = 20)\n\nfor axes in ax.flat:\n     axes.legend(loc='upper left', frameon=False)\n     axes.grid(axis='x', alpha=.5)\n\n\nplt.tight_layout()\nplt.show()\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\n# Generating data via numpy package\nx = np.linspace(-np.pi, np.pi, num=30, endpoint=True)\ncos_x = np.cos(x)\nsin_x = np.sin(x)\n\n\n# Specify how many columns or rows\nfig, ax = plt.subplots(nrows = 2, figsize=(6, 5), sharex = True)\n\nax[1].set_xlabel('x-axis!', fontsize = 12)\n\n# Aesthetics & Plotting for ax[0] #\nax[0].plot(x, sin_x, marker = 'o', linestyle = '-' ,label='sin x')\nax[0].hlines(0, xmin = -np.pi, xmax = np.pi, linestyle = 'dashed')\nax[0].set_ylabel('y-axis for sin x!',fontsize = 16)\nax[0].set_title('title for sin x!',fontsize = 20)\n\n\n# Aesthetics & Plotting for ax[1] #\nax[1].plot(x, cos_x, label='cos x', color='green')\nax[1].hlines(0, xmin = -np.pi, xmax = np.pi, linestyle = 'dashed')\nax[1].set_ylabel('y-axis for cos x!',fontsize = 16)\nax[1].set_title('title for cos x!',fontsize = 20)\n\nfor axes in ax.flat:\n     axes.legend(loc='upper left', frameon=False)\n     axes.grid(axis='x', alpha=.5)\n\n\nplt.tight_layout()\nplt.show()\n"},{"path":"basic-plotting-with-matplotlib.html","id":"example-5-grid","chapter":"6 Basic Plotting with matplotlib","heading":"Example 5 |  Grid","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"results-4","chapter":"6 Basic Plotting with matplotlib","heading":"Results","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"code-4","chapter":"6 Basic Plotting with matplotlib","heading":"Code","text":"","code":"from matplotlib import pyplot as plt\nimport numpy as np\n\n#--------- Generate cosine and sine values --------#\nx = np.linspace(-np.pi, np.pi, num=100, endpoint=True)\ncos_x = np.cos(x)\nsin_x = np.sin(x)\nfun_cos_x = np.exp(-x)*np.cos(5*x)\nfun_sin_x = np.exp(-x)*np.sin(5*x)\n\n#------------------ Plot the data -----------------#\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 8), sharex='col', sharey='row')\n\n# Plot 0,0 : Cosines\naxes[0, 0].plot(x, cos_x, color='r', label='cos x')\naxes[0, 0].plot(x, cos_x**2, color='grey', linestyle='--', label='cos$^2$ x')\naxes[0, 0].set_title('Cosine x & Cosine$^2$ x')\naxes[0, 0].set_xlim(-np.pi, np.pi)\naxes[0, 0].legend(loc='lower center', frameon=False)\n\n# Plot 0,1 : Sine\naxes[0, 1].plot(x, sin_x, color='g', label='sin x')\naxes[0, 1].plot(x, sin_x**2, color='grey', linestyle='--', label='sin$^2$ x')\naxes[0, 1].set_title('Sin x & Sin$^2$ x')\naxes[0, 1].set_ylim(-1.25, 1.25)\naxes[0, 1].legend(loc='lower right', frameon=False)\n\n# Plot 1,0 : Function with Cosine\naxes[1, 0].plot(x, fun_cos_x, color='r')\naxes[1, 0].fill_between(x, fun_cos_x, 0, color='r', alpha=.125)\naxes[1, 0].set_title('Function with Cosine')\naxes[1, 0].set_xlim(-np.pi, np.pi)\n\n# Plot 0,1 : Function with Sine\naxes[1, 1].plot(x, fun_sin_x, color='g')\naxes[1, 1].fill_between(x, fun_sin_x, 0, color='g', alpha=.125)\naxes[1, 1].set_title('Function with Sine')\naxes[1, 1].set_xlim(-np.pi, np.pi)\n\n\naxes[1, 0].set_xlabel('Angle (radians)')\naxes[1, 1].set_xlabel('Angle (radians)')\n\naxes[0, 0].set_ylim(-1, 1)\naxes[0, 1].set_ylim(-1, 1)\n\naxes[1, 0].set_ylim(-20, 15)\naxes[1, 1].set_ylim(-20, 15)\n\nfor a in axes.flat:        # 'flat', 'opens' the 2D list into a simple 1D list\n    a.grid(alpha=.5)\n    a.set_xlim(-np.pi, np.pi)\n\nplt.tight_layout()\nplt.show()\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\n#--------- Generate cosine and sine values --------#\nx = np.linspace(-np.pi, np.pi, num=100, endpoint=True)\ncos_x = np.cos(x)\nsin_x = np.sin(x)\nfun_cos_x = np.exp(-x)*np.cos(5*x)\nfun_sin_x = np.exp(-x)*np.sin(5*x)\n\n#------------------ Plot the data -----------------#\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 8), sharex='col', sharey='row')\n\n# Plot 0,0 : Cosines\naxes[0, 0].plot(x, cos_x, color='r', label='cos x')\naxes[0, 0].plot(x, cos_x**2, color='grey', linestyle='--', label='cos$^2$ x')\naxes[0, 0].set_title('Cosine x & Cosine$^2$ x')\naxes[0, 0].set_xlim(-np.pi, np.pi)\naxes[0, 0].legend(loc='lower center', frameon=False)\n\n# Plot 0,1 : Sine\naxes[0, 1].plot(x, sin_x, color='g', label='sin x')\naxes[0, 1].plot(x, sin_x**2, color='grey', linestyle='--', label='sin$^2$ x')\naxes[0, 1].set_title('Sin x & Sin$^2$ x')\naxes[0, 1].set_ylim(-1.25, 1.25)\naxes[0, 1].legend(loc='lower right', frameon=False)\n\n# Plot 1,0 : Function with Cosine\naxes[1, 0].plot(x, fun_cos_x, color='r')\naxes[1, 0].fill_between(x, fun_cos_x, 0, color='r', alpha=.125)\naxes[1, 0].set_title('Function with Cosine')\naxes[1, 0].set_xlim(-np.pi, np.pi)\n\n# Plot 0,1 : Function with Sine\naxes[1, 1].plot(x, fun_sin_x, color='g')\naxes[1, 1].fill_between(x, fun_sin_x, 0, color='g', alpha=.125)\naxes[1, 1].set_title('Function with Sine')\naxes[1, 1].set_xlim(-np.pi, np.pi)\n\n\naxes[1, 0].set_xlabel('Angle (radians)')\naxes[1, 1].set_xlabel('Angle (radians)')\n\naxes[0, 0].set_ylim(-1, 1)\naxes[0, 1].set_ylim(-1, 1)\n\naxes[1, 0].set_ylim(-20, 15)\naxes[1, 1].set_ylim(-20, 15)\n\nfor a in axes.flat:        # 'flat', 'opens' the 2D list into a simple 1D list\n    a.grid(alpha=.5)\n    a.set_xlim(-np.pi, np.pi)\n\nplt.tight_layout()\nplt.show()\n"},{"path":"basic-plotting-with-matplotlib.html","id":"example-6-one-plot---two-axes","chapter":"6 Basic Plotting with matplotlib","heading":"Example 6 |  One plot - Two Axes","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"result-1","chapter":"6 Basic Plotting with matplotlib","heading":"Result","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"code-5","chapter":"6 Basic Plotting with matplotlib","heading":"Code","text":"generate two sets data data_1 data_2Note use marker, linestyle, color label!Note graphs plotted figure!like scatterplot lines, try plt.scatter()!","code":"from matplotlib import pyplot as plt\n\n# Some data for plotting\nx_1 = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\n\nx_2 = [5, 4, 3, 2, 1, 0]\ny_2 = [0, 2, 4, 6, 8, 10]\n\n\n\n\n# Actual plotting #\nplt.plot(x_1, y_1, marker = 'o', linestyle = '-', \n          color = '#08D9D6', label = 'Graph 1')\n\nplt.plot(x_2, y_2, marker = '*', markersize='5', linestyle = 'dashed',\n          color = '#FF2E63', label = 'Graph 2')\n\n# Aesthetics #\nplt.legend()\nplt.xlabel('This is the x-axis', fontsize = 16)\nplt.ylabel('This is the y-axis', fontsize = 16)\nplt.title('This is the Title!', fontsize = 20)\nplt.tight_layout()\nplt.show()\n\nfrom matplotlib import pyplot as plt\n\n# Some data for plotting\nx_1 = [0, 1, 2, 3, 4, 5]\ny_1 = [0, 2, 4, 6, 8, 10]\n\nx_2 = [5, 4, 3, 2, 1, 0]\ny_2 = [0, 2, 4, 6, 8, 10]\n\n\n\n\n# Actual plotting #\nplt.plot(x_1, y_1, marker = 'o', linestyle = '-', \n          color = '#08D9D6', label = 'Graph 1')\n\nplt.plot(x_2, y_2, marker = '*', markersize='5', linestyle = 'dashed',\n          color = '#FF2E63', label = 'Graph 2')\n\n# Aesthetics #\nplt.legend()\nplt.xlabel('This is the x-axis', fontsize = 16)\nplt.ylabel('This is the y-axis', fontsize = 16)\nplt.title('This is the Title!', fontsize = 20)\nplt.tight_layout()\nplt.show()\n"},{"path":"basic-plotting-with-matplotlib.html","id":"other-plots","chapter":"6 Basic Plotting with matplotlib","heading":"6.3 Other Plots","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"example-7-histograms","chapter":"6 Basic Plotting with matplotlib","heading":"Example 7 |  Histograms","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"result-2","chapter":"6 Basic Plotting with matplotlib","heading":"Result","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"code-6","chapter":"6 Basic Plotting with matplotlib","heading":"Code","text":"generate set data Continously distributedWe used plt.hist() generate histogram!","code":"from matplotlib import pyplot as plt\n\n# Some data for plotting\ndata = [0,0,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,5,5,6,7,7,8,8,9,10]\n\n\n\n\n# Actual plotting #\nplt.hist(data, bins = 10,color='#C0C0C0')\n\n# Aesthetics #\nplt.xlabel('This is the x-axis', fontsize =8)\nplt.ylabel('This is the y-axis', fontsize = 12)\nplt.title('This is the Title!', fontsize = 16)\nplt.tight_layout()\nplt.show()\n\nfrom matplotlib import pyplot as plt\n\n# Some data for plotting\ndata = [0,0,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,5,5,6,7,7,8,8,9,10]\n\n\n\n\n# Actual plotting #\nplt.hist(data, bins = 10,color='#C0C0C0')\n\n# Aesthetics #\nplt.xlabel('This is the x-axis', fontsize =8)\nplt.ylabel('This is the y-axis', fontsize = 12)\nplt.title('This is the Title!', fontsize = 16)\nplt.tight_layout()\nplt.show()\n"},{"path":"basic-plotting-with-matplotlib.html","id":"example-8-boxplots","chapter":"6 Basic Plotting with matplotlib","heading":"Example 8 |  Boxplots","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"result-3","chapter":"6 Basic Plotting with matplotlib","heading":"Result","text":"","code":""},{"path":"basic-plotting-with-matplotlib.html","id":"code-7","chapter":"6 Basic Plotting with matplotlib","heading":"Code","text":"generate set data Normally distributedWe used plt.boxplot() generate boxplot!used another package,numpy create separate array","code":"from matplotlib import pyplot as plt\nimport numpy as np\n\n\n# Some data for plotting\ndata = [0,0,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,5,5,6,7,7,8,8,9,10]\ndata1 = np.array(data) / 1.5 * 5\nprint(data1)\n\n\n# Actual plotting #\nplt.boxplot([data, data1], labels = ['data','data1'])\n\n\n# Aesthetics #\nplt.xlabel('This is the x-axis', fontsize = 16)\nplt.ylabel('This is the y-axis', fontsize = 16)\nplt.title('This is the Title!', fontsize = 20)\nplt.tight_layout()\nplt.show()\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\n\n# Some data for plotting\ndata = [0,0,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,5,5,6,7,7,8,8,9,10]\ndata1 = np.array(data) / 1.5 * 5\nprint(data1)\n\n\n# Actual plotting #\nplt.boxplot([data, data1], labels = ['data','data1'])\n\n\n# Aesthetics #\nplt.xlabel('This is the x-axis', fontsize = 16)\nplt.ylabel('This is the y-axis', fontsize = 16)\nplt.title('This is the Title!', fontsize = 20)\nplt.tight_layout()\nplt.show()\n"}]
